// Example program with memory load/store and ALU ops
// Sample program  2  
// LWD & SWD AND Rd is odd 
		 
	memory[0]  = {6'b000101, 4'd1, 4'd0, 4'd0, 14'd8};     // ADDI R1, R0, 8      ; R1 = 8
	memory[1]  = {6'b000101, 4'd2, 4'd0, 4'd0, 14'd20};    // ADDI R2, R0, 20     ; R2 = 20	  
	memory[2]  = {6'b001001, 4'd8, 4'd1, 4'd0, 14'd4};     // SDW R8, 4(R1)       ; MEM[R1 + 4] = R8    MEM[5+R1] = R9
	memory[3]  = {6'b001001, 4'd6, 4'd0, 4'd0, 14'd0};     // SDW R6, 0(R0)       ; MEM[0] = R6			MEM[1+R0] = R7
	memory[4]  = {6'b001000, 4'd3, 4'd0, 4'd0, 14'd0};     // LDW R3, 0(R0)       ;	Exception
	memory[5]  = {6'b001000, 4'd4, 4'd1, 4'd0, 14'd4};     // LDW R4, 4(R1)       ; R4 = MEM[8+4]   R5 = MEM[R1+5]
	memory[6]  = {6'b000001, 4'd5, 4'd2, 4'd3, 14'd0};     // ADD R5, R2, R3      ; R5 = R2 + R3
	memory[7]  = {6'b000010, 4'd6, 4'd5, 4'd4, 14'd0};     // SUB R6, R5, R4      ; R6 = R5 - R4
	memory[8]  = {6'b000000, 4'd7, 4'd3, 4'd4, 14'd0};     // OR R7, R3, R4       ; R7 = R3 | R4
	memory[9]  = {6'b000011, 4'd8, 4'd3, 4'd4, 14'd0};     // CMP R8, R3, R4      ; R8 = R3 & R4  