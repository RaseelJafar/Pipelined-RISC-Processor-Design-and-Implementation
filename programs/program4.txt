// Test 4: Control flow instructions (BLZ, BGZ, J, JR, CALL, 
//forwaord from load double word(stall between rounds and another stall between Round2 and next instuction ))
// Tests branch, jump, and subroutine handling with pipeline forwarding
	memory[0] = {6'b000101, 4'd1, 4'd0, 4'd0, 14'd5};     // ADDI R1, R0, 5    ; R1=5
	memory[1] = {6'b000101, 4'd2, 4'd0, 4'd0, 14'd10};    // ADDI R2, R0, 10   ; R2=10
	memory[2] = {6'b000101, 4'd3, 4'd0, 4'd0, 14'd16379}; // ADDI R3, R0, -5  ; R3=-5 (16379 = -5 in 14-bit 2's comp)
	
	// Test BLZ (branch if negative) - should branch
	memory[3] = {6'b001100, 4'd0, 4'd3, 4'd0, 14'd2};     // BLZ R3, 2         ; branch to 3+2=5 (R3<0)
	memory[4] = {6'b000101, 4'd4, 4'd0, 4'd0, 14'd1};     // ADDI R4, R0, 1    ; skipped (should not execute)
	
	// Test BGZ (branch if positive) - should branch
	memory[5] = {6'b000101, 4'd4, 4'd0, 4'd0, 14'd2};     // ADDI R4, R0, 2    ; R4=2 (branch target)
	memory[6] = {6'b001011, 4'd0, 4'd1, 4'd0, 14'd2};     // BGZ R1, 2         ; branch to 6+2=8 (R1>0)
	memory[7] = {6'b000101, 4'd5, 4'd0, 4'd0, 14'd1};     // ADDI R5, R0, 1    ; skipped
	
	// Test J (unconditional jump)
	memory[8] = {6'b000101, 4'd5, 4'd0, 4'd0, 14'd2};     // ADDI R5, R0, 2    ; R5=2 (branch target)
	memory[9] = {6'b001110, 4'd0, 4'd0, 4'd0, 14'd2};     // J 2               ; jump to 9+2=11
	memory[10] = {6'b000101, 4'd6, 4'd0, 4'd0, 14'd1};    // ADDI R6, R0, 1    ; skipped
	
	// Test CALL and JR (subroutine call/return)
	memory[11] = {6'b000101, 4'd6, 4'd0, 4'd0, 14'd3};    // ADDI R6, R0, 3    ; R6=3
	memory[12] = {6'b001111, 4'd0, 4'd0, 4'd0, 14'd4};    // CLL 4            ; call to 12+4=16 (saves 13 in R14)
	memory[13] = {6'b000101, 4'd10, 4'd0, 4'd0, 14'd100}; // ADDI R10, R0, 100 ; R10=100 (return point)
	
	// Test JR with R15 (PC read)
	memory[14] = {6'b000101, 4'd11, 4'd14, 4'd0, 14'd20};  // ADDI R11, R14, 16  ; R11=52+20=72/4 (18)
	memory[15] = {6'b001101, 4'd0, 4'd11, 4'd0, 14'd0};   // JR R11            ; jump to R11=18
	
	// Subroutine (address 16)
	memory[16] = {6'b000001, 4'd7, 4'd1, 4'd2, 14'd0};    // ADD R7, R1, R2    ; R7=5+10=15
	memory[17] = {6'b001101, 4'd0, 4'd14, 4'd0, 14'd0};   // JR R14            ; return to caller (address 13)
	
	memory[18] = {6'b001110, 4'd0, 4'd0, 4'd0, 14'd3};   // J 3      ; 3 * 4 + current PC = 72    (Address: 21 )           
	memory[19] = {6'b001110, 4'd0, 4'd0, 4'd0, 14'd16366};   // J -1              ; Skipped	
	memory[20] = {6'b001000, 4'd3, 4'd1, 4'd0, 14'd0};   // LDW 3(1, 0)             ; Skipped
	memory[21] = {6'b001001, 4'd6, 4'd8, 4'd0, 14'd0};   // SDW R6(R8, 0)  3 --> r1(add : 0 + 8)  ||  15 -->R2(add :1 + 8)         ;	
	memory[22] = {6'b000111, 4'd10, 4'd0, 4'd0, 14'd4};   //SW R10(R0, 4)  100 -->>	(0 + 4)							 //SW  	R10()
	memory[23] = {6'b001000, 4'd8, 4'd8, 4'd0, 14'd0};   //  LDW R8(R8, 0)   r1(Add : 8 + 0)(3)  >> R8   ||  r2(ADD : 3 + 1)(100) >> R9        
	memory[24] = {6'b000011, 4'd1, 4'd9, 4'd8, 14'd0};   // CMP R1,R9,R8 